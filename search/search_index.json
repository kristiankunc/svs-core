{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SVS","text":"<ul> <li>\ud83c\uddec\ud83c\udde7 self-hosted virtual stack</li> <li>\ud83c\udde8\ud83c\uddff studentsk\u00fd v\u00fdvojov\u00fd server</li> </ul> <ul> <li>Quickstart guide</li> <li>CLI documentation</li> <li>API documentation</li> </ul>"},{"location":"chagelog/","title":"Changelog","text":""},{"location":"chagelog/#050-2025-11-01","title":"0.5.0 (2025-11-01)","text":""},{"location":"chagelog/#features","title":"Features","text":"<ul> <li>Consolidate Docker image name and tags into a single param (3b56629)</li> </ul>"},{"location":"chagelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Add service log obtaining (50868d5)</li> </ul>"},{"location":"chagelog/#041-2025-10-31","title":"0.4.1 (2025-10-31)","text":""},{"location":"chagelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Allow custom python path passing in install script (d247093)</li> </ul>"},{"location":"chagelog/#040-2025-10-30","title":"0.4.0 (2025-10-30)","text":""},{"location":"chagelog/#features_1","title":"Features","text":"<ul> <li>Implement service parameter overrides (#68) (9ad0f8e)</li> <li>Refactor JSON db fields handling (#58) (ff99cc3)</li> </ul>"},{"location":"chagelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Overhaul json props (#55) (66f1706)</li> <li>Remove internal Docker APIs from docs (6e845d0)</li> <li>Use proper permissions for volume management (#57) (33855d5)</li> </ul>"},{"location":"chagelog/#032-2025-10-29","title":"0.3.2 (2025-10-29)","text":""},{"location":"chagelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>fix typo in install script (e92945b)</li> </ul>"},{"location":"chagelog/#031-2025-10-27","title":"0.3.1 (2025-10-27)","text":""},{"location":"chagelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Add system user testing (#46) (608d527)</li> <li>Add template delete functionality (#52) (c7cdaed)</li> </ul>"},{"location":"chagelog/#030-2025-10-24","title":"0.3.0 (2025-10-24)","text":""},{"location":"chagelog/#features_2","title":"Features","text":"<ul> <li>Env Manager overhaul, install script (#41) (735dab2)</li> </ul>"},{"location":"chagelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Deprecate db-based service status (#45) (2f0b81e)</li> <li>improve docstring formatting (#44) (a2fd0f1)</li> </ul>"},{"location":"chagelog/#020-2025-10-22","title":"0.2.0 (2025-10-22)","text":""},{"location":"chagelog/#features_3","title":"Features","text":"<ul> <li>add user CLI (2314121)</li> </ul>"},{"location":"chagelog/#010-2025-10-22","title":"0.1.0 (2025-10-22)","text":""},{"location":"chagelog/#features_4","title":"Features","text":"<ul> <li>add ci workflows for release-please and publishing (#38) (6c612a0)</li> </ul>"},{"location":"chagelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>delete invalid arg for release-please (960cfdc)</li> </ul>"},{"location":"cli/","title":"CLI Documentation","text":"<p>This document contains the CLI commands and their descriptions.</p> <p>This file is auto-generated by the typer docs utility (<code>docs/compile-cli.py</code>).</p> <p>All commands must be run via sudo (even for normal users)</p>"},{"location":"cli/#svs","title":"<code>svs</code>","text":"<p>Usage:</p> <pre><code>$ svs [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>user</code>: Manage users</li> <li><code>template</code>: Manage templates</li> <li><code>service</code>: Manage services</li> </ul>"},{"location":"cli/#svs-user","title":"<code>svs user</code>","text":"<p>Manage users</p> <p>Usage:</p> <pre><code>$ svs user [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>create</code>: Create a new user.</li> <li><code>get</code>: Get a user by name.</li> <li><code>check-password</code>: Check if a password matches the stored hash.</li> <li><code>list</code>: List all users.</li> </ul>"},{"location":"cli/#svs-user-create","title":"<code>svs user create</code>","text":"<p>Create a new user.</p> <p>Usage:</p> <pre><code>$ svs user create [OPTIONS] NAME PASSWORD\n</code></pre> <p>Arguments:</p> <ul> <li><code>NAME</code>: Username of the new user  [required]</li> <li><code>PASSWORD</code>: Password for the new user  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#svs-user-get","title":"<code>svs user get</code>","text":"<p>Get a user by name.</p> <p>Usage:</p> <pre><code>$ svs user get [OPTIONS] NAME\n</code></pre> <p>Arguments:</p> <ul> <li><code>NAME</code>: Username of the user to retrieve  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#svs-user-check-password","title":"<code>svs user check-password</code>","text":"<p>Check if a password matches the stored hash.</p> <p>Usage:</p> <pre><code>$ svs user check-password [OPTIONS] NAME PASSWORD\n</code></pre> <p>Arguments:</p> <ul> <li><code>NAME</code>: Username of the user  [required]</li> <li><code>PASSWORD</code>: Password to check against the stored hash  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#svs-user-list","title":"<code>svs user list</code>","text":"<p>List all users.</p> <p>Usage:</p> <pre><code>$ svs user list [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#svs-template","title":"<code>svs template</code>","text":"<p>Manage templates</p> <p>Usage:</p> <pre><code>$ svs template [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>import</code>: Import a new template from a file.</li> <li><code>list</code>: List all available templates.</li> <li><code>delete</code>: Delete a template by name.</li> </ul>"},{"location":"cli/#svs-template-import","title":"<code>svs template import</code>","text":"<p>Import a new template from a file.</p> <p>Usage:</p> <pre><code>$ svs template import [OPTIONS] FILE_PATH\n</code></pre> <p>Arguments:</p> <ul> <li><code>FILE_PATH</code>: Path to the template file to import  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#svs-template-list","title":"<code>svs template list</code>","text":"<p>List all available templates.</p> <p>Usage:</p> <pre><code>$ svs template list [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#svs-template-delete","title":"<code>svs template delete</code>","text":"<p>Delete a template by name.</p> <p>Usage:</p> <pre><code>$ svs template delete [OPTIONS] TEMPLATE_NAME\n</code></pre> <p>Arguments:</p> <ul> <li><code>TEMPLATE_NAME</code>: Name of the template to delete  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#svs-service","title":"<code>svs service</code>","text":"<p>Manage services</p> <p>Usage:</p> <pre><code>$ svs service [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>list</code>: List all services.</li> <li><code>create</code>: Create a new service.</li> <li><code>start</code>: Start a service.</li> <li><code>stop</code>: Stop a service.</li> <li><code>delete</code>: Delete a service.</li> </ul>"},{"location":"cli/#svs-service-list","title":"<code>svs service list</code>","text":"<p>List all services.</p> <p>Usage:</p> <pre><code>$ svs service list [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#svs-service-create","title":"<code>svs service create</code>","text":"<p>Create a new service.</p> <p>Usage:</p> <pre><code>$ svs service create [OPTIONS] NAME TEMPLATE_ID USER_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>NAME</code>: Name of the service to create  [required]</li> <li><code>TEMPLATE_ID</code>: ID of the template to use  [required]</li> <li><code>USER_ID</code>: ID of the user creating the service  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#svs-service-start","title":"<code>svs service start</code>","text":"<p>Start a service.</p> <p>Usage:</p> <pre><code>$ svs service start [OPTIONS] SERVICE_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>SERVICE_ID</code>: ID of the service to start  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#svs-service-stop","title":"<code>svs service stop</code>","text":"<p>Stop a service.</p> <p>Usage:</p> <pre><code>$ svs service stop [OPTIONS] SERVICE_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>SERVICE_ID</code>: ID of the service to stop  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/#svs-service-delete","title":"<code>svs service delete</code>","text":"<p>Delete a service.</p> <p>Usage:</p> <pre><code>$ svs service delete [OPTIONS] SERVICE_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>SERVICE_ID</code>: ID of the service to delete  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"api/","title":"Api documentation","text":"<p>Apart from the CLI, svs-core also provides a Python library which can be used to integrate svs functionality into your own applications.</p>"},{"location":"api/service/","title":"Service","text":""},{"location":"api/service/#svs_core.docker.service.Service","title":"Service","text":"<p>               Bases: <code>ServiceModel</code></p> <p>Service class representing a service in the system.</p>"},{"location":"api/service/#svs_core.docker.service.Service.create_from_template","title":"create_from_template  <code>classmethod</code>","text":"<pre><code>create_from_template(name: str, template_id: int, user: User, domain: str | None = None, override_env: list[EnvVariable] | None = None, override_ports: list[ExposedPort] | None = None, override_volumes: list[Volume] | None = None, override_command: str | None = None, override_healthcheck: Healthcheck | None = None, override_labels: list[Label] | None = None, override_args: list[str] | None = None, networks: list[str] | None = None) -&gt; Service\n</code></pre> <p>Creates a service from an existing template with overrides.</p> <p>Arguments that inherit from the KeyValue class (EnvVariable, Volume, ExposedPort, Label) allow partial merging and overriding. Other arguments completely replace the template's default values.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the service.</p> required <code>template_id</code> <code>int</code> <p>The ID of the template to use.</p> required <code>user</code> <code>User</code> <p>The user who owns this service.</p> required <code>domain</code> <code>str</code> <p>The domain for this service.</p> <code>None</code> <code>override_env</code> <code>list[EnvVariable]</code> <p>Environment variables to override.</p> <code>None</code> <code>override_ports</code> <code>list[ExposedPort]</code> <p>Exposed ports to override.</p> <code>None</code> <code>override_volumes</code> <code>list[Volume]</code> <p>Volumes to override.</p> <code>None</code> <code>override_command</code> <code>str</code> <p>Command to run in the container.</p> <code>None</code> <code>override_healthcheck</code> <code>Healthcheck</code> <p>Healthcheck configuration.</p> <code>None</code> <code>override_labels</code> <code>list[Label]</code> <p>Container labels to override.</p> <code>None</code> <code>override_args</code> <code>list[str]</code> <p>Command arguments to override.</p> <code>None</code> <code>networks</code> <code>list[str]</code> <p>Networks to connect to.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Service</code> <code>Service</code> <p>The created service instance.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If name is empty or template_id doesn't correspond to an existing template.</p> Source code in <code>svs_core/docker/service.py</code> <pre><code>@classmethod\ndef create_from_template(\n    cls,\n    name: str,\n    template_id: int,\n    user: User,\n    domain: str | None = None,\n    override_env: list[EnvVariable] | None = None,\n    override_ports: list[ExposedPort] | None = None,\n    override_volumes: list[Volume] | None = None,\n    override_command: str | None = None,\n    override_healthcheck: Healthcheck | None = None,\n    override_labels: list[Label] | None = None,\n    override_args: list[str] | None = None,\n    networks: list[str] | None = None,\n) -&gt; Service:\n    \"\"\"Creates a service from an existing template with overrides.\n\n    Arguments that inherit from the KeyValue class (EnvVariable, Volume, ExposedPort, Label) allow partial merging and overriding. Other arguments completely replace the template's default values.\n\n    Args:\n        name (str): The name of the service.\n        template_id (int): The ID of the template to use.\n        user (User): The user who owns this service.\n        domain (str, optional): The domain for this service.\n        override_env (list[EnvVariable], optional): Environment variables to override.\n        override_ports (list[ExposedPort], optional): Exposed ports to override.\n        override_volumes (list[Volume], optional): Volumes to override.\n        override_command (str, optional): Command to run in the container.\n        override_healthcheck (Healthcheck, optional): Healthcheck configuration.\n        override_labels (list[Label], optional): Container labels to override.\n        override_args (list[str], optional): Command arguments to override.\n        networks (list[str], optional): Networks to connect to.\n\n    Returns:\n        Service: The created service instance.\n\n    Raises:\n        ValueError: If name is empty or template_id doesn't correspond to an existing template.\n    \"\"\"\n\n    try:\n        template = Template.objects.get(id=template_id)\n    except Template.DoesNotExist:\n        raise ValueError(f\"Template with ID {template_id} does not exist\")\n\n    if not name:\n        raise ValueError(\"Service name cannot be empty\")\n\n    env = (\n        cls._merge_overrides(template.default_env, override_env)\n        if override_env\n        else template.default_env\n    )\n    exposed_ports = (\n        cls._merge_overrides(template.default_ports, override_ports)\n        if override_ports\n        else template.default_ports\n    )\n    volumes = (\n        cls._merge_overrides(template.default_volumes, override_volumes)\n        if override_volumes\n        else template.default_volumes\n    )\n    labels = (\n        cls._merge_overrides(template.labels, override_labels)\n        if override_labels\n        else template.labels\n    )\n    healthcheck = (\n        override_healthcheck if override_healthcheck else template.healthcheck\n    )\n    command = override_command if override_command else template.start_cmd\n    args = override_args if override_args else template.args\n\n    get_logger(__name__).info(\n        f\"Creating service '{name}' from template '{template.name}'\"\n    )\n\n    return cls.create(\n        name=name,\n        template_id=template.id,\n        user=user,\n        domain=domain,\n        image=template.image,\n        exposed_ports=exposed_ports,\n        env=env,\n        volumes=volumes,\n        command=command,\n        healthcheck=healthcheck,\n        labels=labels,\n        args=args,\n        networks=networks,\n    )\n</code></pre>"},{"location":"api/service/#svs_core.docker.service.Service.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(name: str, template_id: int, user: User, domain: str | None = None, container_id: str | None = None, image: str | None = None, exposed_ports: list[ExposedPort] | None = None, env: list[EnvVariable] | None = None, volumes: list[Volume] | None = None, command: str | None = None, healthcheck: Healthcheck | None = None, labels: list[Label] | None = None, args: list[str] | None = None, networks: list[str] | None = None) -&gt; Service\n</code></pre> <p>Creates a new service with all supported attributes.</p> <p>Values not explicitly provided will be inherited from the template where applicable.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the service.</p> required <code>template_id</code> <code>int</code> <p>The ID of the template to use.</p> required <code>user</code> <code>User</code> <p>The user who owns this service.</p> required <code>domain</code> <code>str</code> <p>The domain for this service.</p> <code>None</code> <code>container_id</code> <code>str</code> <p>The ID of an existing container.</p> <code>None</code> <code>image</code> <code>str</code> <p>Docker image to use, defaults to template.image if not provided.</p> <code>None</code> <code>exposed_ports</code> <code>list[ExposedPort]</code> <p>Exposed ports, defaults to template.default_ports if not provided.</p> <code>None</code> <code>env</code> <code>list[EnvVariable]</code> <p>Environment variables, defaults to template.default_env if not provided.</p> <code>None</code> <code>volumes</code> <code>list[Volume]</code> <p>Volume mappings, defaults to template.default_volumes if not provided.</p> <code>None</code> <code>command</code> <code>str</code> <p>Command to run in the container, defaults to template.start_cmd if not provided.</p> <code>None</code> <code>healthcheck</code> <code>Healthcheck</code> <p>Healthcheck configuration, defaults to template.healthcheck if not provided.</p> <code>None</code> <code>labels</code> <code>list[Label]</code> <p>Container labels, defaults to template.labels if not provided.</p> <code>None</code> <code>args</code> <code>list[str]</code> <p>Command arguments, defaults to template.args if not provided.</p> <code>None</code> <code>networks</code> <code>list[str]</code> <p>Networks to connect to.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Service</code> <code>Service</code> <p>The created service instance.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If name is empty or template_id doesn't correspond to an existing template.</p> Source code in <code>svs_core/docker/service.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    name: str,\n    template_id: int,\n    user: User,\n    domain: str | None = None,\n    container_id: str | None = None,\n    image: str | None = None,\n    exposed_ports: list[ExposedPort] | None = None,\n    env: list[EnvVariable] | None = None,\n    volumes: list[Volume] | None = None,\n    command: str | None = None,\n    healthcheck: Healthcheck | None = None,\n    labels: list[Label] | None = None,\n    args: list[str] | None = None,\n    networks: list[str] | None = None,\n) -&gt; Service:\n    \"\"\"Creates a new service with all supported attributes.\n\n    Values not explicitly provided will be inherited from the template where\n    applicable.\n\n    Args:\n        name (str): The name of the service.\n        template_id (int): The ID of the template to use.\n        user (User): The user who owns this service.\n        domain (str, optional): The domain for this service.\n        container_id (str, optional): The ID of an existing container.\n        image (str, optional): Docker image to use, defaults to template.image if not provided.\n        exposed_ports (list[ExposedPort], optional): Exposed ports, defaults to template.default_ports if not provided.\n        env (list[EnvVariable], optional): Environment variables, defaults to template.default_env if not provided.\n        volumes (list[Volume], optional): Volume mappings, defaults to template.default_volumes if not provided.\n        command (str, optional): Command to run in the container, defaults to template.start_cmd if not provided.\n        healthcheck (Healthcheck, optional): Healthcheck configuration, defaults to template.healthcheck if not provided.\n        labels (list[Label], optional): Container labels, defaults to template.labels if not provided.\n        args (list[str], optional): Command arguments, defaults to template.args if not provided.\n        networks (list[str], optional): Networks to connect to.\n\n    Returns:\n        Service: The created service instance.\n\n    Raises:\n        ValueError: If name is empty or template_id doesn't correspond to an existing template.\n    \"\"\"\n    # Input validation\n    if not name:\n        raise ValueError(\"Service name cannot be empty\")\n\n    if not isinstance(name, str):\n        raise ValueError(f\"Service name must be a string: {name}\")\n\n    if not isinstance(template_id, int):\n        raise ValueError(f\"Template ID must be an integer: {template_id}\")\n\n    if template_id &lt;= 0:\n        raise ValueError(f\"Template ID must be positive: {template_id}\")\n\n    if domain is not None and not isinstance(domain, str):\n        raise ValueError(f\"Domain must be a string: {domain}\")\n\n    if container_id is not None and not isinstance(container_id, str):\n        raise ValueError(f\"Container ID must be a string: {container_id}\")\n\n    if image is not None and not isinstance(image, str):\n        raise ValueError(f\"Image must be a string: {image}\")\n\n    if command is not None and not isinstance(command, str):\n        raise ValueError(f\"Command must be a string: {command}\")\n\n    if networks is not None:\n        if not isinstance(networks, list):\n            raise ValueError(f\"Networks must be a list: {networks}\")\n        for net in networks:\n            if not isinstance(net, str):\n                raise ValueError(f\"Each network must be a string: {net}\")\n\n    # Validate exposed_ports\n    if exposed_ports is not None:\n        if not isinstance(exposed_ports, list):\n            raise ValueError(f\"Exposed ports must be a list: {exposed_ports}\")\n        for port in exposed_ports:\n            if not isinstance(port, ExposedPort):\n                raise ValueError(\n                    f\"Each port must be an ExposedPort instance: {port}\"\n                )\n            if not isinstance(port.container_port, int) or port.container_port &lt;= 0:\n                raise ValueError(\n                    f\"Container port must be a positive integer: {port.container_port}\"\n                )\n\n    # Validate env\n    if env is not None:\n        if not isinstance(env, list):\n            raise ValueError(f\"Environment variables must be a list: {env}\")\n        for var in env:\n            if not isinstance(var, EnvVariable):\n                raise ValueError(\n                    f\"Each environment variable must be an EnvVariable instance: {var}\"\n                )\n            if not var.key or not isinstance(var.key, str):\n                raise ValueError(\n                    f\"Environment variable key must be a non-empty string: {var.key}\"\n                )\n            if not isinstance(var.value, str):\n                raise ValueError(\n                    f\"Environment variable value must be a string: {var.value}\"\n                )\n\n    # Validate volumes\n    if volumes is not None:\n        if not isinstance(volumes, list):\n            raise ValueError(f\"Volumes must be a list: {volumes}\")\n        for vol in volumes:\n            if not isinstance(vol, Volume):\n                raise ValueError(f\"Each volume must be a Volume instance: {vol}\")\n            if not vol.container_path or not isinstance(vol.container_path, str):\n                raise ValueError(\n                    f\"Volume container path must be a non-empty string: {vol.container_path}\"\n                )\n            if vol.host_path is not None and not isinstance(vol.host_path, str):\n                raise ValueError(\n                    f\"Volume host path must be a string: {vol.host_path}\"\n                )\n\n    # Validate labels\n    if labels is not None:\n        if not isinstance(labels, list):\n            raise ValueError(f\"Labels must be a list: {labels}\")\n        for label in labels:\n            if not isinstance(label, Label):\n                raise ValueError(f\"Each label must be a Label instance: {label}\")\n            if not label.key or not isinstance(label.key, str):\n                raise ValueError(\n                    f\"Label key must be a non-empty string: {label.key}\"\n                )\n            if not isinstance(label.value, str):\n                raise ValueError(f\"Label value must be a string: {label.value}\")\n\n    # Validate healthcheck\n    if healthcheck is not None and not isinstance(healthcheck, Healthcheck):\n        raise ValueError(\n            f\"Healthcheck must be a Healthcheck instance: {healthcheck}\"\n        )\n\n    # Validate args\n    if args is not None:\n        if not isinstance(args, list):\n            raise ValueError(f\"Arguments must be a list: {args}\")\n        for arg in args:\n            if not isinstance(arg, str):\n                raise ValueError(f\"Each argument must be a string: {arg}\")\n\n    try:\n        template = Template.objects.get(id=template_id)\n    except Template.DoesNotExist:\n        raise ValueError(f\"Template with ID {template_id} does not exist\")\n\n    # Use template defaults if not provided\n    if image is None:\n        image = template.image\n\n    if exposed_ports is None:\n        exposed_ports = list(template.default_ports)\n\n    if env is None:\n        env = list(template.default_env)\n\n    if volumes is None:\n        volumes = list(template.default_volumes)\n\n    if command is None:\n        command = template.start_cmd\n\n    if healthcheck is None:\n        healthcheck = template.healthcheck\n\n    if labels is None:\n        labels = list(template.labels)\n\n    if args is None:\n        args = list(template.args) if template.args else []\n\n    # Generate free ports and volumes if needed\n    for port in exposed_ports:\n        if port.host_port is None:\n            port.host_port = SystemPortManager.find_free_port()\n\n    for volume in volumes:\n        if volume.host_path is None:\n            volume.host_path = SystemVolumeManager.generate_free_volume(\n                user\n            ).as_posix()\n\n    labels.append(Label(key=\"svs_user\", value=user.name))\n\n    # Create service instance\n    service_instance = cls.objects.create(\n        name=name,\n        template_id=template_id,\n        user_id=user.id,\n        domain=domain,\n        container_id=container_id,\n        image=image,\n        exposed_ports=exposed_ports,\n        env=env,\n        volumes=volumes,\n        command=command,\n        healthcheck=healthcheck,\n        labels=labels,\n        args=args,\n        networks=networks,\n    )\n\n    system_labels = [Label(key=\"service_id\", value=str(service_instance.id))]\n\n    if service_instance.domain:\n        system_labels.append(Label(key=\"caddy\", value=service_instance.domain))\n\n        if service_instance.exposed_ports:\n            http_ports = [\n                port\n                for port in service_instance.exposed_ports\n                if port.container_port in (80, 443)\n            ]\n\n            if http_ports:\n                upstreams = \", \".join(\n                    f\"{{upstreams {port.container_port}}}\" for port in http_ports\n                )\n                if upstreams:\n                    system_labels.append(Label(key=\"upstreams\", value=upstreams))\n\n    model_labels = list(service_instance.labels)\n    all_labels = system_labels + model_labels\n\n    # Update service with all labels (system + model)\n    service_instance.labels = all_labels\n    print(service_instance.labels)\n\n    if not service_instance.image:\n        raise ValueError(\"Service must have an image specified\")\n\n    get_logger(__name__).info(f\"Creating service '{name}'\")\n\n    container = DockerContainerManager.create_container(\n        name=name,\n        image=service_instance.image,\n        command=service_instance.command,\n        args=service_instance.args,\n        labels=all_labels,\n        ports={\n            port.container_port: port.host_port\n            for port in service_instance.exposed_ports\n        },\n    )\n\n    service_instance.container_id = container.id\n    service_instance.save()\n\n    return cast(Service, service_instance)\n</code></pre>"},{"location":"api/service/#svs_core.docker.service.Service.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start the service's Docker container.</p> Source code in <code>svs_core/docker/service.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start the service's Docker container.\"\"\"\n    if not self.container_id:\n        raise ValueError(\"Service does not have a container ID\")\n\n    container = DockerContainerManager.get_container(self.container_id)\n    if not container:\n        raise ValueError(f\"Container with ID {self.container_id} not found\")\n\n    get_logger(__name__).info(\n        f\"Starting service '{self.name}' with container ID '{self.container_id}'\"\n    )\n\n    container.start()\n    self.save()\n</code></pre>"},{"location":"api/service/#svs_core.docker.service.Service.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop the service's Docker container.</p> Source code in <code>svs_core/docker/service.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop the service's Docker container.\"\"\"\n    if not self.container_id:\n        raise ValueError(\"Service does not have a container ID\")\n\n    container = DockerContainerManager.get_container(self.container_id)\n    if not container:\n        raise ValueError(f\"Container with ID {self.container_id} not found\")\n\n    get_logger(__name__).info(\n        f\"Stopping service '{self.name}' with container ID '{self.container_id}'\"\n    )\n\n    container.stop()\n    self.save()\n</code></pre>"},{"location":"api/service/#svs_core.docker.service.Service.delete","title":"delete","text":"<pre><code>delete() -&gt; None\n</code></pre> <p>Delete the service and its Docker container.</p> Source code in <code>svs_core/docker/service.py</code> <pre><code>def delete(self) -&gt; None:\n    \"\"\"Delete the service and its Docker container.\"\"\"\n    if self.container_id:\n        container = DockerContainerManager.get_container(self.container_id)\n        if container:\n            get_logger(__name__).info(\n                f\"Deleting container '{self.container_id}' for service '{self.name}'\"\n            )\n            container.remove(force=True)\n\n    volumes = self.volumes\n    for volume in volumes:\n        if volume.host_path:\n            SystemVolumeManager.delete_volume(Path(volume.host_path))\n\n    get_logger(__name__).info(f\"Deleting service '{self.name}'\")\n\n    super().delete()\n</code></pre>"},{"location":"api/service/#svs_core.docker.service.Service.get_logs","title":"get_logs","text":"<pre><code>get_logs(tail: int = 100) -&gt; str\n</code></pre> <p>Retrieve the logs of the service's Docker container.</p> <p>Parameters:</p> Name Type Description Default <code>tail</code> <code>int</code> <p>Number of lines from the end of the logs to retrieve.</p> <code>100</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The logs of the container as a string.</p> Source code in <code>svs_core/docker/service.py</code> <pre><code>def get_logs(self, tail: int = 100) -&gt; str:\n    \"\"\"Retrieve the logs of the service's Docker container.\n\n    Args:\n        tail (int): Number of lines from the end of the logs to retrieve.\n\n    Returns:\n        str: The logs of the container as a string.\n    \"\"\"\n    if not self.container_id:\n        raise ValueError(\"Service does not have a container ID\")\n\n    container = DockerContainerManager.get_container(self.container_id)\n    if not container:\n        raise ValueError(f\"Container with ID {self.container_id} not found\")\n\n    get_logger(__name__).info(\n        f\"Retrieving logs for service '{self.name}' with container ID '{self.container_id}'\"\n    )\n\n    logs = container.logs(tail=tail)\n    return cast(str, logs.decode(\"utf-8\"))\n</code></pre>"},{"location":"api/template/","title":"Template","text":""},{"location":"api/template/#svs_core.docker.template.Template","title":"Template","text":"<p>               Bases: <code>TemplateModel</code></p> <p>Template class representing a Docker template in the system.</p>"},{"location":"api/template/#svs_core.docker.template.Template.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(name: str, type: TemplateType = TemplateType.IMAGE, image: str | None = None, dockerfile: str | None = None, description: str | None = None, default_env: list[EnvVariable] | None = None, default_ports: list[ExposedPort] | None = None, default_volumes: list[Volume] | None = None, start_cmd: str | None = None, healthcheck: Healthcheck | None = None, labels: list[Label] | None = None, args: list[str] | None = None) -&gt; Template\n</code></pre> <p>Creates a new template with all supported attributes.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the template.</p> required <code>type</code> <code>TemplateType</code> <p>The type of the template (image or build). Defaults to TemplateType.IMAGE.</p> <code>IMAGE</code> <code>image</code> <code>str | None</code> <p>The Docker image name (if type is image). Defaults to None.</p> <code>None</code> <code>dockerfile</code> <code>str | None</code> <p>The Dockerfile content (if type is build). Defaults to None.</p> <code>None</code> <code>description</code> <code>str | None</code> <p>A description of the template. Defaults to None.</p> <code>None</code> <code>default_env</code> <code>list[EnvVariable] | None</code> <p>Default environment variables. Defaults to None.</p> <code>None</code> <code>default_ports</code> <code>list[ExposedPort] | None</code> <p>Default exposed ports. Defaults to None.</p> <code>None</code> <code>default_volumes</code> <code>list[Volume] | None</code> <p>Default volume bindings. Defaults to None.</p> <code>None</code> <code>start_cmd</code> <code>str | None</code> <p>The default start command. Defaults to None.</p> <code>None</code> <code>healthcheck</code> <code>Healthcheck | None</code> <p>The healthcheck configuration. Defaults to None.</p> <code>None</code> <code>labels</code> <code>list[Label] | None</code> <p>Default Docker labels. Defaults to None.</p> <code>None</code> <code>args</code> <code>list[str] | None</code> <p>Default arguments for the container. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Template</code> <code>Template</code> <p>A new Template instance.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any of the provided values are invalid.</p> Source code in <code>svs_core/docker/template.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    name: str,\n    type: TemplateType = TemplateType.IMAGE,\n    image: str | None = None,\n    dockerfile: str | None = None,\n    description: str | None = None,\n    default_env: list[EnvVariable] | None = None,\n    default_ports: list[ExposedPort] | None = None,\n    default_volumes: list[Volume] | None = None,\n    start_cmd: str | None = None,\n    healthcheck: Healthcheck | None = None,\n    labels: list[Label] | None = None,\n    args: list[str] | None = None,\n) -&gt; Template:\n    \"\"\"Creates a new template with all supported attributes.\n\n    Args:\n        name (str): The name of the template.\n        type (TemplateType, optional): The type of the template (image or build). Defaults to TemplateType.IMAGE.\n        image (str | None, optional): The Docker image name (if type is image). Defaults to None.\n        dockerfile (str | None, optional): The Dockerfile content (if type is build). Defaults to None.\n        description (str | None, optional): A description of the template. Defaults to None.\n        default_env (list[EnvVariable] | None, optional): Default environment variables. Defaults to None.\n        default_ports (list[ExposedPort] | None, optional): Default exposed ports. Defaults to None.\n        default_volumes (list[Volume] | None, optional): Default volume bindings. Defaults to None.\n        start_cmd (str | None, optional): The default start command. Defaults to None.\n        healthcheck (Healthcheck | None, optional): The healthcheck configuration. Defaults to None.\n        labels (list[Label] | None, optional): Default Docker labels. Defaults to None.\n        args (list[str] | None, optional): Default arguments for the container. Defaults to None.\n\n    Returns:\n        Template: A new Template instance.\n\n    Raises:\n        ValueError: If any of the provided values are invalid.\n    \"\"\"\n\n    # Validate name\n    if not name:\n        raise ValueError(\"Template name cannot be empty\")\n\n    # Validate type-specific requirements\n    if type == TemplateType.IMAGE:\n        if not image:\n            raise ValueError(\"Image type templates must specify an image\")\n    elif type == TemplateType.BUILD:\n        if not dockerfile:\n            raise ValueError(\"Build type templates must specify a dockerfile\")\n\n    # Validate image format if provided\n    if image is not None:\n        if not image:\n            raise ValueError(\"Image cannot be empty if provided\")\n\n    # Validate dockerfile if provided\n    if dockerfile is not None and not dockerfile.strip():\n        raise ValueError(\"Dockerfile cannot be empty if provided\")\n\n    # Validate default_env\n    if default_env is not None:\n        for var in default_env:\n            if not isinstance(var.key, str) or not isinstance(var.value, str):\n                raise ValueError(\n                    f\"Default environment keys and values must be strings: {var.key}={var.value}\"\n                )\n            if not var.key:\n                raise ValueError(\"Default environment keys cannot be empty\")\n\n    # Validate default_ports\n    if default_ports is not None:\n        for port in default_ports:\n            # host_port can be None (meaning any available host port), but container_port must be an int\n            if port.host_port is not None and not isinstance(port.host_port, int):\n                raise ValueError(\n                    f\"Port host_port must be an integer or None: {port}\"\n                )\n            if not isinstance(port.container_port, int):\n                raise ValueError(f\"Port container_port must be an integer: {port}\")\n            # If host_port is provided, it must be positive\n            if port.host_port is not None and port.host_port &lt;= 0:\n                raise ValueError(\n                    f\"Port host_port must be a positive integer when provided: {port}\"\n                )\n            if port.container_port &lt;= 0:\n                raise ValueError(\n                    f\"Port container_port must be a positive integer: {port}\"\n                )\n\n    # Validate default_volumes\n    if default_volumes is not None:\n        for volume in default_volumes:\n            if not isinstance(volume.container_path, str):\n                raise ValueError(\n                    f\"Volume container path must be a string: {volume}\"\n                )\n            if volume.host_path is not None and not isinstance(\n                volume.host_path, str\n            ):\n                raise ValueError(f\"Volume host path must be a string: {volume}\")\n            if not volume.container_path:\n                raise ValueError(\"Volume container path cannot be empty\")\n\n    # Validate start_cmd\n    if start_cmd is not None and not isinstance(start_cmd, str):\n        raise ValueError(f\"Start command must be a string: {start_cmd}\")\n\n    # Validate healthcheck\n    if healthcheck is not None and len(healthcheck.test) == 0:\n        raise ValueError(\"Healthcheck must contain a 'test' field\")\n\n    # Validate labels\n    if labels is not None:\n        for label in labels:\n            if not isinstance(label.key, str) or not isinstance(label.value, str):\n                raise ValueError(\n                    f\"Label keys and values must be strings: {label.key}={label.value}\"\n                )\n            if not label.key:\n                raise ValueError(\"Label keys cannot be empty\")\n\n    # Validate args\n    if args is not None:\n        if not isinstance(args, list):\n            raise ValueError(f\"Arguments must be a list of strings: {args}\")\n        for arg in args:\n            if not isinstance(arg, str):\n                raise ValueError(f\"Argument must be a string: {arg}\")\n            if not arg:\n                raise ValueError(\"Arguments cannot be empty strings\")\n\n    get_logger(__name__).debug(\n        f\"Creating template with name={name}, type={type}, image={image}, dockerfile={dockerfile}, \"\n        f\"description={description}, default_env={default_env}, default_ports={default_ports}, \"\n        f\"default_volumes={default_volumes}, start_cmd={start_cmd}, healthcheck={healthcheck}, \"\n        f\"labels={labels}, args={args}\"\n    )\n\n    template = cls.objects.create(\n        name=name,\n        type=type,\n        image=image,\n        dockerfile=dockerfile,\n        description=description,\n        default_env=default_env,\n        default_ports=default_ports,\n        default_volumes=default_volumes,\n        start_cmd=start_cmd,\n        healthcheck=healthcheck,\n        labels=labels,\n        args=args,\n    )\n\n    if type == TemplateType.IMAGE and image is not None:\n        if not DockerImageManager.exists(image):\n            DockerImageManager.pull(image)\n\n    elif type == TemplateType.BUILD and dockerfile is not None:\n        print(f\"Building image for template {name} from dockerfile\")\n        DockerImageManager.build_from_dockerfile(name, dockerfile)\n\n    return cast(Template, template)\n</code></pre>"},{"location":"api/template/#svs_core.docker.template.Template.import_from_json","title":"import_from_json  <code>classmethod</code>","text":"<pre><code>import_from_json(data: dict[str, Any]) -&gt; Template\n</code></pre> <p>Creates a Template instance from a JSON/dict object.</p> <p>Relies on theexisting create factory method.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>The JSON data dictionary containing template attributes.</p> required <p>Returns:</p> Name Type Description <code>Template</code> <code>Template</code> <p>A new Template instance created from the JSON data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the data is invalid or missing required fields.</p> Source code in <code>svs_core/docker/template.py</code> <pre><code>@classmethod\ndef import_from_json(cls, data: dict[str, Any]) -&gt; Template:\n    \"\"\"Creates a Template instance from a JSON/dict object.\n\n    Relies on theexisting create factory method.\n\n    Args:\n        data (dict[str, Any]): The JSON data dictionary containing template attributes.\n\n    Returns:\n        Template: A new Template instance created from the JSON data.\n\n    Raises:\n        ValueError: If the data is invalid or missing required fields.\n    \"\"\"\n    # Validate input\n    if not isinstance(data, dict):\n        raise ValueError(\n            f\"Template import data must be a dictionary, got {type(data)}\"\n        )\n\n    # Validate required fields\n    if \"name\" not in data:\n        raise ValueError(\"Template import data must contain a 'name' field\")\n\n    # Validate template type\n    template_type = data.get(\"type\", \"image\")\n    try:\n        template_type = TemplateType(template_type)\n    except ValueError:\n        valid_types = [t.value for t in TemplateType]\n        raise ValueError(\n            f\"Invalid template type: {template_type}. Must be one of: {valid_types}\"\n        )\n\n    # Validate type-specific fields\n    if template_type == TemplateType.IMAGE and \"image\" not in data:\n        raise ValueError(\n            \"Image type templates must specify an 'image' field in import data\"\n        )\n    elif template_type == TemplateType.BUILD and \"dockerfile\" not in data:\n        raise ValueError(\n            \"Build type templates must specify a 'dockerfile' field in import data\"\n        )\n\n    # Process default_env: handle both flat dict and list formats\n    default_env_data = data.get(\"default_env\", [])\n    if isinstance(default_env_data, dict):\n        # Convert flat dict to list of dicts format: {\"KEY\": \"value\"} -&gt; [{\"KEY\": \"value\"}]\n        default_env_list = [{k: v} for k, v in default_env_data.items()]\n    else:\n        default_env_list = default_env_data\n\n    # Process default_ports: handle both formats\n    # Format 1: [{\"host_port\": 8080, \"container_port\": 80}] (single key-value format)\n    # Format 2: [{\"host\": 8080, \"container\": 80}] (named field format)\n    default_ports_data = data.get(\"default_ports\", [])\n    default_ports_list = []\n    for port_data in default_ports_data:\n        if isinstance(port_data, dict):\n            # Handle named field format: {\"host\": 8080, \"container\": 80}\n            if \"host\" in port_data and \"container\" in port_data:\n                default_ports_list.append(\n                    ExposedPort(\n                        host_port=port_data[\"host\"],\n                        container_port=port_data[\"container\"],\n                    )\n                )\n            # Handle single key-value format: {8080: 80}\n            elif len(port_data) == 1:\n                host_port = next(iter(port_data))\n                container_port = port_data[host_port]\n                default_ports_list.append(\n                    ExposedPort(host_port=host_port, container_port=container_port)\n                )\n            else:\n                raise ValueError(\n                    f\"Invalid port specification: {port_data}. \"\n                    \"Must contain either 'host' and 'container' fields or be a single key-value pair.\"\n                )\n\n    # Process default_volumes: handle both formats\n    # Format 1: [{\"host_path\": \"/host\", \"container_path\": \"/container\"}]\n    # Format 2: [{\"host\": \"/host\", \"container\": \"/container\"}]\n    default_volumes_data = data.get(\"default_volumes\", [])\n    default_volumes_list = []\n    for vol_data in default_volumes_data:\n        if isinstance(vol_data, dict):\n            # Handle named field format: {\"host\": \"/host\", \"container\": \"/container\"}\n            if \"host\" in vol_data and \"container\" in vol_data:\n                default_volumes_list.append(\n                    Volume(\n                        host_path=vol_data[\"host\"],\n                        container_path=vol_data[\"container\"],\n                    )\n                )\n            # Handle single key-value format: {\"/host\": \"/container\"}\n            elif len(vol_data) == 1:\n                host_path = next(iter(vol_data))\n                container_path = vol_data[host_path]\n                default_volumes_list.append(\n                    Volume(host_path=host_path, container_path=container_path)\n                )\n            else:\n                raise ValueError(\n                    f\"Invalid volume specification: {vol_data}. \"\n                    \"Must contain either 'host' and 'container' fields or be a single key-value pair.\"\n                )\n\n    # Process labels: handle both flat dict and list formats\n    labels_data = data.get(\"labels\", [])\n    if isinstance(labels_data, dict):\n        # Convert flat dict to list of dicts format: {\"KEY\": \"value\"} -&gt; [{\"KEY\": \"value\"}]\n        labels_list = [{k: v} for k, v in labels_data.items()]\n    else:\n        labels_list = labels_data\n\n    # Delegate to create method for further validation\n    template: \"Template\" = cls.create(\n        name=data.get(\"name\", \"\"),\n        type=template_type,\n        image=data.get(\"image\"),\n        dockerfile=data.get(\"dockerfile\"),\n        description=data.get(\"description\"),\n        default_env=EnvVariable.from_dict_array(default_env_list),\n        default_ports=default_ports_list,\n        default_volumes=default_volumes_list,\n        start_cmd=data.get(\"start_cmd\"),\n        healthcheck=Healthcheck.from_dict(data.get(\"healthcheck\")),\n        labels=Label.from_dict_array(labels_list),\n        args=data.get(\"args\"),\n    )\n\n    return template\n</code></pre>"},{"location":"api/template/#svs_core.docker.template.Template.delete","title":"delete","text":"<pre><code>delete() -&gt; None\n</code></pre> <p>Deletes the template and associated Docker image if applicable.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the template is associated with existing services.</p> Source code in <code>svs_core/docker/template.py</code> <pre><code>def delete(self) -&gt; None:\n    \"\"\"Deletes the template and associated Docker image if applicable.\n\n    Raises:\n        Exception: If the template is associated with existing services.\n    \"\"\"\n\n    from svs_core.docker.service import Service\n\n    services = Service.objects.filter(template=self)\n\n    if len(services) &gt; 0:\n        raise Exception(\n            f\"Cannot delete template {self.name} as it is associated with existing services.\"\n        )\n\n    if self.type == TemplateType.IMAGE and self.image:\n        DockerImageManager.remove(self.image)\n\n    super().delete()\n</code></pre>"},{"location":"api/user/","title":"User","text":""},{"location":"api/user/#svs_core.users.user.InvalidUsernameException","title":"InvalidUsernameException","text":"<pre><code>InvalidUsernameException(username: str)\n</code></pre> <p>               Bases: <code>SVSException</code></p> <p>Exception raised when the provided username is invalid.</p> <p>When created, a system users and a docker network will be created holding the same name.</p> Source code in <code>svs_core/users/user.py</code> <pre><code>def __init__(self, username: str):\n    super().__init__(f\"Invalid username: '{username}'.\")\n    self.username = username\n</code></pre>"},{"location":"api/user/#svs_core.users.user.InvalidPasswordException","title":"InvalidPasswordException","text":"<pre><code>InvalidPasswordException(password: str)\n</code></pre> <p>               Bases: <code>SVSException</code></p> <p>Exception raised when the provided password is invalid.</p> Source code in <code>svs_core/users/user.py</code> <pre><code>def __init__(self, password: str):\n    super().__init__(\n        f\"Invalid password: '{password}'. Password must be at least 8 characters long.\"\n    )\n    self.password = password\n</code></pre>"},{"location":"api/user/#svs_core.users.user.User","title":"User","text":"<p>               Bases: <code>UserModel</code></p> <p>User class representing a user in the system.</p>"},{"location":"api/user/#svs_core.users.user.User.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(name: str, password: str, is_admin: bool = False) -&gt; User\n</code></pre> <p>Creates a new user with the given name and password.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The username for the new user.</p> required <code>password</code> <code>str</code> <p>The password for the new user.</p> required <code>is_admin</code> <code>bool</code> <p>Whether the user should be admin.</p> <code>False</code> <p>Raises:</p> Type Description <code>AlreadyExistsException</code> <p>If the username already exists.</p> <code>InvalidUsernameException</code> <p>If the username is invalid.</p> <p>Returns:</p> Name Type Description <code>User</code> <code>User</code> <p>The created user instance.</p> Source code in <code>svs_core/users/user.py</code> <pre><code>@classmethod\ndef create(cls, name: str, password: str, is_admin: bool = False) -&gt; User:\n    \"\"\"Creates a new user with the given name and password.\n\n    Args:\n        name (str): The username for the new user.\n        password (str): The password for the new user.\n        is_admin (bool): Whether the user should be admin.\n\n    Raises:\n        AlreadyExistsException: If the username already exists.\n        InvalidUsernameException: If the username is invalid.\n\n    Returns:\n        User: The created user instance.\n    \"\"\"\n    if not cls.is_username_valid(name):\n        raise InvalidUsernameException(name)\n    if not cls.is_password_valid(password):\n        raise InvalidPasswordException(password)\n    if cls.username_exists(name):\n        raise AlreadyExistsException(entity=\"User\", identifier=name)\n\n    user: \"User\" = cls.objects.create(\n        name=name, password=hash_password(password).decode(\"utf-8\")\n    )\n\n    DockerNetworkManager.create_network(name, labels={\"svs_user\": name})\n    SystemUserManager.create_user(name, password, is_admin)\n\n    get_logger(__name__).info(f\"Created user: {name}\")\n    return user\n</code></pre>"},{"location":"api/user/#svs_core.users.user.User.is_username_valid","title":"is_username_valid  <code>staticmethod</code>","text":"<pre><code>is_username_valid(username: str) -&gt; bool\n</code></pre> <p>Validates the username based on specific criteria.</p> <p>The username needs to be a valid UNIX username.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to validate.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the username is valid, False otherwise.</p> Source code in <code>svs_core/users/user.py</code> <pre><code>@staticmethod\ndef is_username_valid(username: str) -&gt; bool:\n    \"\"\"Validates the username based on specific criteria.\n\n    The username needs to be a valid UNIX username.\n\n    Args:\n        username (str): The username to validate.\n\n    Returns:\n        bool: True if the username is valid, False otherwise.\n    \"\"\"\n    if not isinstance(username, str):\n        return False\n    if len(username) == 0 or len(username) &gt; 32:\n        return False\n\n    pattern = r\"^[a-z_][a-z0-9_-]{0,30}\\$?$\"\n    return bool(re.match(pattern, username))\n</code></pre>"},{"location":"api/user/#svs_core.users.user.User.is_password_valid","title":"is_password_valid  <code>staticmethod</code>","text":"<pre><code>is_password_valid(password: str) -&gt; bool\n</code></pre> <p>Validates the password based on specific criteria.</p> <p>The password must be at least 8 characters long.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>The password to validate.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the password is valid, False otherwise.</p> Source code in <code>svs_core/users/user.py</code> <pre><code>@staticmethod\ndef is_password_valid(password: str) -&gt; bool:\n    \"\"\"Validates the password based on specific criteria.\n\n    The password must be at least 8 characters long.\n\n    Args:\n        password (str): The password to validate.\n\n    Returns:\n        bool: True if the password is valid, False otherwise.\n    \"\"\"\n    return isinstance(password, str) and len(password) &gt;= 8\n</code></pre>"},{"location":"api/user/#svs_core.users.user.User.username_exists","title":"username_exists  <code>classmethod</code>","text":"<pre><code>username_exists(username: str) -&gt; bool\n</code></pre> <p>Checks if a username already exists in the database.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the username exists, False otherwise.</p> Source code in <code>svs_core/users/user.py</code> <pre><code>@classmethod\ndef username_exists(cls, username: str) -&gt; bool:\n    \"\"\"Checks if a username already exists in the database.\n\n    Args:\n        username (str): The username to check.\n\n    Returns:\n        bool: True if the username exists, False otherwise.\n    \"\"\"\n    return cast(bool, cls.objects.filter(name=username).exists())\n</code></pre>"},{"location":"api/user/#svs_core.users.user.User.check_password","title":"check_password","text":"<pre><code>check_password(password: str) -&gt; bool\n</code></pre> <p>Checks if the provided password matches the user's password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>The password to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the password matches, False otherwise.</p> Source code in <code>svs_core/users/user.py</code> <pre><code>def check_password(self, password: str) -&gt; bool:\n    \"\"\"Checks if the provided password matches the user's password.\n\n    Args:\n        password (str): The password to check.\n\n    Returns:\n        bool: True if the password matches, False otherwise.\n    \"\"\"\n    from svs_core.shared.hash import check_password\n\n    hashed = self.password.encode(\"utf-8\")\n\n    return check_password(password, hashed)\n</code></pre>"},{"location":"api/user/#svs_core.users.user.User.delete","title":"delete","text":"<pre><code>delete() -&gt; None\n</code></pre> <p>Deletes the user from the database and removes associated resources.</p> <p>This includes deleting the system user and Docker network associated with the user.</p> Source code in <code>svs_core/users/user.py</code> <pre><code>def delete(self) -&gt; None:\n    \"\"\"Deletes the user from the database and removes associated resources.\n\n    This includes deleting the system user and Docker network\n    associated with the user.\n    \"\"\"\n    if len(self.services.all()) &gt; 0:\n        raise InvalidOperationException(\n            f\"Cannot delete user '{self.name}' because they have associated services.\"\n        )\n\n    SystemVolumeManager.delete_user_volumes(self.id)\n    DockerNetworkManager.delete_network(self.name)\n    SystemUserManager.delete_user(self.name)\n    super().delete()\n\n    get_logger(__name__).info(f\"Deleted user: {self.name}\")\n</code></pre>"},{"location":"api/user/#svs_core.users.user.User.is_admin","title":"is_admin","text":"<pre><code>is_admin() -&gt; bool\n</code></pre> <p>Checks if the user has administrative privileges.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the user is an admin, False otherwise.</p> Source code in <code>svs_core/users/user.py</code> <pre><code>def is_admin(self) -&gt; bool:\n    \"\"\"Checks if the user has administrative privileges.\n\n    Returns:\n        bool: True if the user is an admin, False otherwise.\n    \"\"\"\n    return SystemUserManager.is_user_in_group(self.name, \"svs-admins\")\n</code></pre>"},{"location":"setup/","title":"How to get started","text":"<ul> <li>First, you need to install the application.</li> <li>Then you run your first hello world service.</li> </ul>"},{"location":"setup/hello-world/","title":"Hello world","text":""},{"location":"setup/hello-world/#starting-a-hello-world-service","title":"Starting a hello-world service","text":"<p>After successfully installing and configuring SVS, you can start your first service.</p> <p>We're gonna run a simple nginx webserver</p>"},{"location":"setup/hello-world/#importing-the-config","title":"Importing the config","text":"<p>Grab the example template configuration from https://github.com/kristiankunc/svs-core/blob/main/service_templates/nginx.json</p> <pre><code>$ curl -o nginx.json https://raw.githubusercontent.com/kristiankunc/svs-core/refs/heads/main/service_templates/nginx.json\n</code></pre> <p>and apply it using the <code>svs template import</code> command</p> <pre><code>$ sudo svs template import nginx.json\n</code></pre> <p>Verify all data via <code>svs template list</code></p> <pre><code>$ sudo svs template list\n</code></pre>"},{"location":"setup/hello-world/#creating-the-service","title":"Creating the service","text":"<p>We use <code>svs service create</code></p> <pre><code>$ sudo svs service create &lt;user_id&gt; &lt;template_id&gt;\n</code></pre> <p>The IDs are indexed from 1 so you can likely put that in, if in doubt use the list commands (<code>svs template//user//service list</code>)</p>"},{"location":"setup/hello-world/#starting-and-checking-the-service","title":"Starting and checking the service","text":"<p>Simply start the service</p> <pre><code>$ sudo svs service start &lt;service_id&gt;\n</code></pre> <p>After that, you can list your services and see which port has been assigned. If you curl <code>localhost:&lt;assigned_port&gt;</code>, you should receive the nginx hello world message.</p>"},{"location":"setup/quickstart/","title":"Quickstart","text":""},{"location":"setup/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you meet the following prerequisites:</p>"},{"location":"setup/quickstart/#linux-distribution","title":"Linux distribution","text":"<p>A Debian based distribution (e.g., Debian, Ubuntu, etc.) is required. Other distributions might work, but are not officially supported.</p>"},{"location":"setup/quickstart/#docker","title":"Docker","text":"<p>Ensure Docker is installed on your system. You can install Docker by following the official Docker installation guide.</p>"},{"location":"setup/quickstart/#docker-compose","title":"Docker Compose","text":"<p>Ensure Docker Compose is installed. You can install it by following the official Docker Compose installation guide.</p>"},{"location":"setup/quickstart/#build-packages","title":"Build packages","text":"<p>Depending on your distribution, you may need the following build packages:</p> <ul> <li>libpq-dev</li> <li>python3-dev</li> <li>build-essential</li> </ul> <p>Install via <pre><code>$ apt install -y libpq-dev python3-dev build-essential\n</code></pre></p>"},{"location":"setup/quickstart/#backend-services","title":"Backend services","text":"<p>The following backend services are required to be configured and running:  - PostgreSQL  - Caddy</p> <p>Caddy must be ran via docker, as it relies on recognising docker labels for reverse proxying. PostgreSQL can be ran natively but docker is recommended for ease of setup.</p> <p>You can use the example compose file to set up these services. Make sure to configure the environment variables in the <code>.env</code> file accordingly.</p> Example docker-compose.yml <pre><code>name: \"svs-core\"\n\nservices:\n    db:\n        image: postgres:latest\n        restart: unless-stopped\n        container_name: svs-db\n        env_file:\n            - .env\n        ports:\n            - \"5432:5432\"\n        volumes:\n            - pgdata:/var/lib/postgresql\n\n    caddy:\n        image: lucaslorentz/caddy-docker-proxy:latest\n        container_name: caddy\n        restart: unless-stopped\n        ports:\n            - \"80:80\"\n            - \"443:443\"\n        volumes:\n            - /var/run/docker.sock:/var/run/docker.sock\n            - caddy_data:/data\n            - caddy_config:/config\n        environment:\n            - CADDY_INGRESS_NETWORK=caddy\n        networks:\n            - caddy\n\nvolumes:\n    pgdata:\n    caddy_data:\n    caddy_config:\n\nnetworks:\n    caddy:\n        driver: bridge\n</code></pre> Example docker-compose .env file <pre><code>POSTGRES_USER=\nPOSTGRES_PASSWORD=\nPOSTGRES_DB=\nPOSTGRES_HOST=localhost\nPGPORT=5432\n</code></pre>"},{"location":"setup/quickstart/#application-setup","title":"Application setup","text":""},{"location":"setup/quickstart/#install-pipx","title":"Install pipx","text":"<p>Install <code>pipx</code> to safely install the CLI globally without affecting system packages. Follow the official pipx installation guide to install pipx.</p>"},{"location":"setup/quickstart/#install-the-cli-globally","title":"Install the CLI globally","text":"<pre><code>$ sudo PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/local/bin pipx install svs_core\n</code></pre> <p>Following that, you need to force the PIPX_HOME and PIPX_BIN_DIR ENV variables for all users by appendng it to <code>etc/environment</code></p> <pre><code>$ printf '%s\\n' 'PIPX_HOME=\"/opt/pipx\"' 'PIPX_BIN_DIR=\"/usr/local/bin\"' | sudo tee -a /etc/environment\n</code></pre> <p>To verify the installation, run:</p> <pre><code>$ which svs\n</code></pre> <p>This should output <code>/usr/local/bin/svs</code>.</p>"},{"location":"setup/quickstart/#run-setup-script","title":"Run setup script","text":"<p>Run the setup script to initialze the configuration. Requires sudo privileges to create necessary directories and set permissions.</p> <p>Download the setup script from https://github.com/kristiankunc/svs-core/blob/main/install.sh</p> <pre><code>$ sudo bash install.sh\n</code></pre>"},{"location":"setup/quickstart/#configure-environment-variables","title":"Configure environment variables","text":"<p>The install script wll create a <code>.env</code> for svs which requires configuration. Edit the file to set the necessary environment variables.</p> Example svs .env file <pre><code>DATABASE_URL=postgres://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;database&gt;\n</code></pre> <p>After configuring it, re-run the install script. You will be prompted to create a first admin user. Using a brand new, SVS-only system user is recommended but not enforced.</p> <p>To run a hello world service, check out hello-world</p> <p>That's it. Head over to the cli documentation to get started with using the CLI.</p>"}]}