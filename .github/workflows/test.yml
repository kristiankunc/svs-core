name: Test

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install ".[dev]"

      - name: Run pre-commit hooks
        run: |
          source .venv/bin/activate
          pre-commit run --all-files

  test:
    needs: lint-format
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:28-dind
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Load environment variables from .env.ci
        uses: aarcangeli/load-dotenv@v1
        with:
          path: .github/extra
          filenames: .env.ci
          expand: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-qemu-action@v3

      - name: Build & Start Containers
        run: |
          docker compose -f .github/extra/docker-compose.yml up -d --build

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[dev]"

      - name: Wait for DB to be ready
        run: |
          attempt=1
          max_attempts=30
          until docker exec $(docker ps -qf "name=db") pg_isready -U $POSTGRES_USER || [ $attempt -gt $max_attempts ]; do
            echo "Waiting for database... (Attempt $attempt/$max_attempts)"
            echo "Container logs:"
            docker logs $(docker ps -qf "name=db")
            sleep 2
            attempt=$((attempt+1))
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "Database failed to become ready in time"
            exit 1
          fi

      - name: Run tests
        run: pytest --cov --cov-branch --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  build:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref != 'refs/heads/main' && github.event_name == 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install build tools
        run: pip install build twine

      - name: Set dynamic version with patch bump
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          CURRENT_VERSION=$(grep -Po '(?<=^version = ")[^"]+' pyproject.toml)
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          BUMPED_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${BUMPED_PATCH}"
          VERSION="${NEW_VERSION}.dev${PR_NUMBER}${TIMESTAMP}"
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          sed -i "s/^version = .*/version = \"${VERSION}\"/" pyproject.toml

      - name: Build package
        run: python -m build

      - name: Upload to TestPyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m twine upload \
          --repository testpypi \
          --skip-existing dist/*

      - name: Find previous comment
        id: find-comment
        uses: peter-evans/find-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "A new TestPyPI release is available for this PR!"

      - name: Get current datetime
        run: echo "BUILD_DATETIME=$(date '+%B %d, %Y at %H:%M')" >> $GITHUB_ENV

      - name: Comment with install instructions
        uses: peter-evans/create-or-update-comment@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ðŸš€ A new TestPyPI release is available for this PR!

            **Version:** `${{ env.PACKAGE_VERSION }}`
            **Built:** ${{ env.BUILD_DATETIME }}
            **Commit:** [`${{ github.event.pull_request.head.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }})
            **Install with:**
            ```bash
            pip install --extra-index-url https://test.pypi.org/simple/ svs_core==${{ env.PACKAGE_VERSION }}
            ```

            [View on TestPyPI](https://test.pypi.org/project/svs_core/${{ env.PACKAGE_VERSION }}/)
          edit-mode: replace
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
