name: Test

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install ".[dev]"

      - name: Run pre-commit hooks
        run: |
          source .venv/bin/activate
          pre-commit run --all-files

  test:
    needs: lint-format
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:28-dind
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Load environment variables from .env.ci
        uses: aarcangeli/load-dotenv@v1
        with:
          path: .github/extra
          filenames: .env.ci
          expand: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-qemu-action@v3

      - name: Build & Start Containers
        run: |
          docker compose -f .github/extra/docker-compose.yml up -d --build

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[dev]"

      - name: Run setup script
        run: |
          chmod +x ./install.sh
          ./install.sh -y --user test_admin --password test_password

      - name: Run tests
        run: |
          newgrp svs-admins << EOF
          pytest --cov --cov-branch --cov-report=xml
          EOF

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  build:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref != 'refs/heads/main' && github.event_name == 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Find previous comment
        id: find-comment
        uses: peter-evans/find-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "A new TestPyPI release is available for this PR!"

      - name: Get current datetime
        run: echo "BUILD_DATETIME=$(date '+%B %d, %Y at %H:%M')" >> $GITHUB_ENV

      - name: Generate pipx install command
        id: generate-download-url
        run: |
          PACKAGE_VERSION=$(sudo PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/local/bin pipx show svs_core 2>/dev/null | grep Version | awk '{print $2}' || echo "unknown")
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
          echo "DOWNLOAD_URL=git+${{ github.server_url }}/${{ github.repository }}@${{ github.head_ref }}" >> $GITHUB_ENV

      - name: Comment with install instructions
        uses: peter-evans/create-or-update-comment@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ðŸš€ A new TestPyPI release is available for this PR!

            **Version:** `${{ env.PACKAGE_VERSION }}`
            **Built:** ${{ env.BUILD_DATETIME }}
            **Commit:** [`${{ github.event.pull_request.head.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }})
            **Install with:**
            ```bash
            pip install git+${{ env.DOWNLOAD_URL }}
            ```

            [View on TestPyPI](https://test.pypi.org/project/svs_core/${{ env.PACKAGE_VERSION }}/)
          edit-mode: replace
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
